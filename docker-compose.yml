# The version of the docker-compose standard being followed here
version: '3.2'

# Services are groups of containers handling one aspect of the application
services:
  database: # PostgreSQL
    image: postgres:alpine

    # No matter what, if the container stops, start it again
    restart: always

    # Expose the port 5432 used by PostgreSQL to other containers
    expose:
    - "5432"

    # Run the container as the non-root user
    user: postgres

    # Set the environment variables
    env_file:
    - postgres/database.env

    # Mount the volumes on the database container
    volumes:
      # Mount 'database' as the place where PostgreSQL stores all its data
    - type: volume
      source: database
      target: /var/lib/postgresql/data
      read_only: false

  channel-layer: # Redis
    # Use the Redis image from Alpine Linux as is
    image: redis:alpine

    # No matter what, if the container stops, start it again
    restart: always

    # Expose the port 6379 used by Redis to other containers
    expose:
    - "6379"

    # Run the container as the non-root user
    user: redis

  session-store: # Redis
    # Use the Redis image from Alpine Linux as is
    image: redis:alpine

    # No matter what, if the container stops, start it again
    restart: always

    # Expose the port 6379 used by Redis to other containers
    expose:
    - "6379"

    # Run the container as the non-root user
    user: redis

  message-broker: # RabbitMQ
    # Use the RabbitMQ image from Alpine Linux as is
    image: rabbitmq:management-alpine

    # No matter what, if the container stops, start it again
    restart: always

    # Expose the port 5672 used by RabbitMQ to other containers
    expose:
    - "5672"

    # Expose the ports 15672 to the host at 5672 and 15672
    ports:
    - "15672:15672"

    # Run the container as the non-root user
    user: rabbitmq
    
    # Set the environment variables
    env_file:
    - rabbitmq/message_broker.env

  intranet-server: # Django = Gunicorn + Daphne
    # Use the Django image we made ourselves by running ./scripts/build/django.sh
    image: omniport-django:latest

    # No matter what, if the container stops, start it again
    restart: always

    # Expose the ports 8000 and 8001 used by Gunicorn and Daphne to other containers
    expose:
    - "8000"
    - "8001"

    # Run the container as the non-root user
    user: django

    # Set the SITE_ID environment variable so that the right JSON may be processed
    environment:
    - SITE_ID=1

    # Change the port to ensure that each site runs on its own port
    command: ["/usr/bin/supervisord", "-c", "/supervisord.conf"]

    # Mount the volumes on the Django container
    volumes:
    # Mount the code from the 'omniport' folder in the root of the container 
    - type: bind
      source: ./codebase/omniport-backend/omniport
      target: /omniport
      read_only: true

    # Mount the YAML files from the 'configuration' folder in the root of the container
    - type: bind
      source: ./codebase/omniport-backend/configuration
      target: /configuration
      read_only: true

    # Mount the imagery from the 'branding' folder in the root of the container
    - type: bind
      source: ./codebase/omniport-backend/branding
      target: /branding
      read_only: true

    # Mount 'static_files' as its namesake in the root of the container
    - type: volume
      source: static_files
      target: /static_files
      read_only: false
      
    # Mount 'media_files' as its namesake in the root of the container
    - type: volume
      source: media_files
      target: /media_files
      read_only: false

    # Mount 'web_server_logs' as its namesake in the root of the container
    - type: volume
      source: web_server_logs
      target: /web_server_logs
      read_only: false

    # The services that need to be ready before this one
    depends_on:
    - database
    - channel-layer
    - session-store
    - message-broker

  internet-server: # Django = Gunicorn + Daphne
    # Use the Django image we made ourselves by running ./scripts/build/django.sh
    image: omniport-django:latest

    # No matter what, if the container stops, start it again
    restart: always

    # Expose the ports 8000 and 8001 used by Gunicorn and Daphne to other containers
    expose:
      - "8000"
      - "8001"

    # Run the container as the non-root user
    user: django

    # Set the SITE_ID environment variable so that the right JSON may be processed
    environment:
      - SITE_ID=2

    command: ["/usr/bin/supervisord", "-c", "/supervisord.conf"]

    # Mount the volumes on the Django container
    volumes:
      # Mount the code from the 'omniport' folder in the root of the container 
      - type: bind
        source: ./codebase/omniport-backend/omniport
        target: /omniport
        read_only: true

      # Mount the YAML files from the 'configuration' folder in the root of the container
      - type: bind
        source: ./codebase/omniport-backend/configuration
        target: /configuration
        read_only: true

      # Mount the imagery from the 'branding' folder in the root of the container
      - type: bind
        source: ./codebase/omniport-backend/branding
        target: /branding
        read_only: true

      # Mount 'static_files' as its namesake in the root of the container
      - type: volume
        source: static_files
        target: /static_files
        read_only: false
      
      # Mount 'media_files' as its namesake in the root of the container
      - type: volume
        source: media_files
        target: /media_files
        read_only: false

      # Mount 'web_server_logs' as its namesake in the root of the container
      - type: volume
        source: web_server_logs
        target: /web_server_logs
        read_only: false

    # The services that need to be ready before this one
    depends_on:
      - database
      - channel-layer
      - session-store
      - message-broker

  reverse-proxy: # NGINX
    # Use the NGINX image we made ourselves by running ./scripts/build/nginx.sh
    image: omniport-nginx:latest

    # No matter what, if the container stops, start it again
    restart: always

    # Expose the port 80 and 443 used by NGINX to other containers
    expose:
    - "80"
    - "443"

    # Expose the ports 80 and 443 used by NGINX to the host
    ports:
    - "80:80"
    - "443:443"

    # Mount the volumes on the NGINX container
    volumes:
    # Mount the imagery from the 'branding' folder in the root of the container
    - type: bind
      source: ./codebase/omniport-backend/branding
      target: /branding
      read_only: true

    # Mount 'frontend' as its namesake in the root of the container
    - type: volume
      source: frontend
      target: /frontend
      read_only: true

    # Mount 'static_files' as its namesake in the root of the container
    - type: volume
      source: static_files
      target: /static_files
      read_only: true

    # Mount 'media_files' as its namesake in the root of the container
    - type: volume
      source: media_files
      target: /media_files
      read_only: true

    # Mount 'reverse_proxy_logs' as its namesake in the root of the container
    - type: volume
      source: reverse_proxy_logs
      target: /reverse_proxy_logs
      read_only: false

    # The services that need to be ready before this one
    depends_on:
    - intranet-server
    - internet-server

# Volumes are virtual drives connected to containers
volumes:
  # This volume contains the database and PostgreSQL configuration files
  database:
  # This volume contains periodic dumps of the database for backup
  database_backup:

  # This volume contains reverse proxy logs
  reverse_proxy_logs:
  # This volume contains web server logs
  web_server_logs:

  # This volume contains the production build of all frontend apps
  frontend:

  # This volume contains the static files
  static_files:

  # This volume contains the media files
  media_files:
  # This volume contains periodic dumps of the media files for backup
  media_files_backup:
